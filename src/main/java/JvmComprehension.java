public class JvmComprehension {

    // В момент начала работы программы уходит запрос внутри JVM
    // на загрузку классов JvmComprehension, Object, Integer
    // в Class Loaderы(Application ClassLoader,Application ClassLoader,Bootstrap ClassLoader)
    // на этом этапе будут загружены классы

    // далее происходит подготовка классов к выполнению:
    // ● проверка, что код валиден(Verify),
    // ● подготовка примитивов в статических полях(Prepare),
    // ● связывание ссылок на другие классы(Resolve).

    // далее происходит инициализация классов:
    // Выполняются static инициализаторы и инициализаторы static полей.

    // классы JvmComprehension, Object, Integer подгружены в метаспэйс


    public static void main(String[] args) { // в момент вызова метода создаётся фрейм(кадр в стеке) main()

        int i = 1;                      // 1 в стеке, во фрейме main() создаётся переменная  i=1

        Object o = new Object();        // 2 в стеке, во фрейме main() создаётся ссылка на переменную o, типа Object;
        // в хипе создаётся объект o, типа Object

        Integer ii = 2;                 // 3 в стеке, во фрейме main() создаётся ссылка на переменную ii, типа Integer;
        // в хипе создаётся объект ii = 2, типа Integer

        printAll(o, i, ii);             // 4 в момент вызова метода создаётся фрейм(кадр в стеке) printAll(),
        // в стеке, во фрейме printAll() будут созданы ссылки на параметры метода printAll(Object o, int i, Integer ii),
        // после отработки метода printAll() фрейм(кадр в стеке) printAll() закрывается

        System.out.println("finished"); // 7 в момент вызова метода создаётся фрейм(кадр в стеке) println(),
        // в стеке, во фрейме println() создаётся ссылка на переменную "finished"типа String;
        // после вывода строки в консоль фрейм(кадр в стеке) println() закрывается
    }   // после того как все методы завершили свою работу фрейм(кадр в стеке) main() закрывается

    private static void printAll(Object o, int i, Integer ii) {
        Integer uselessVar = 700;    // 5 в стеке, во фрейме printAll() создаётся ссылка на переменную uselessVar,типа Integer
        // в хипе создаётся объект uselessVar = 700, типа Integer

        System.out.println(o.toString() + i + ii);// 6
        // в момент вызова метода создаётся фрейм(кадр в стеке) toString(),
        // в хипе создаётся объект o.toString(), типа String, фрейм(кадр в стеке) toString() закрывается.

        // в момент вызова метода создаётся фрейм(кадр в стеке) println(),
        // в стеке, во фрейме println() создаются ссылки на переменные: o.toString, типа String; i, типа int; ii, типа Integer;
        // после вывода строки в консоль фрейм(кадр в стеке) println() закрывается

    }
    // для сборки мусора происходит приостановка
    // программы - Stop The World пауза - это полная остановка
    // потоков программы для безопасной сборки мусора
}

